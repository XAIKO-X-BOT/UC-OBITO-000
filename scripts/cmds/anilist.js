const axios = require("axios");
const fs = require("fs-extra");
const path = require("path");

const BASE_API_URL = "https://anime-list-api-5ihb.onrender.com";
const OWNER_UID = "61578952791667";

// ‡¶∏‡¶ø‡¶ï‡¶ø‡¶â‡¶∞‡¶ø‡¶ü‡¶ø ‡¶ö‡ßá‡¶ï
function verifyOwnerUID() {
  return OWNER_UID === "61578952791667";
}

// ========== ALBUMS ==========
const ALBUMS = [
  { number: 1, name: "ùêÄùêßùê¢ùê¶ùêû ùêèùê´ùê® üå∏", keyword: "animepro" },
  { number: 2, name: "ùêÄùêßùê¢ùê¶ùêû ùêåùê¢ùê± ü™∂", keyword: "animemix" },
  { number: 3, name: "ùêÄùêßùê¢ùê¶ùêû ùêÇùê®ùê¶ùêûùêùùê≤ üòÇ", keyword: "animecomedy" },
  { number: 4, name: "ùêÄùêßùê¢ùê¶ùêû ùêíùêöùêù üòø", keyword: "animesad" },
  { number: 5, name: "ùêÄùêßùê¢ùê¶ùêû ùêãùê®ùêØùêû üíó", keyword: "animelove" },
  { number: 6, name: "ùêÄùêßùê¢ùê¶ùêû ùêÄùêåùêï ‚ö°", keyword: "animeamv" },
  { number: 7, name: "ùêÄùêßùê¢ùê¶ùêû ùêÉùêöùê´ùê§ üëΩ", keyword: "animedark" },
  { number: 8, name: "ùêÄùêßùê¢ùê¶ùêû ùêÄùêßùê¢ùê¶ùêöùê≠ùê¢ùê®ùêß üèû", keyword: "animeanimation" },
  { number: 9, name: "ùêÄùêßùê¢ùê¶ùêû ùêÅùêöùêßùê†ùêöùê• üáßüá©", keyword: "animebangal" },
  { number: 10, name: "ùêÄùêßùê¢ùê¶ùêû ùêïùê¢ùêùùêûùê® üé•", keyword: "animevideo" }
];

// ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶≤‡¶¨‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú
function generateAlbumList() {
  let msg = "‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùÅ\n";
  msg += "‚îÇ ‚ú®„Äé ùêÄùêçùêàùêåùêÑ ùêÄùêãùêÅùêîùêå „Äè‚ú®\n";
  msg += "‚îÇ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
  ALBUMS.forEach(a => (msg += `‚îÇ ${a.number}. ${a.name}\n`));
  msg += "‚îÇ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
  msg += "‚îÇ üí¨ Reply with album number ü©µ\n";
  msg += "‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùÅ";
  return msg;
}

// ================= EXPORT =================
module.exports = {
  config: {
    name: "anilist2",
    aliases: ["animealbum", "album"],
    version: "2.0.5",
    role: 0,
    author: "JISAN KHAN/OD'X JADID",
    description: "Anime All Video Mix.",
    category: "ANIME",
    countDown: 5
  },

  // ================= onStart =================
  onStart: async ({ api, event }) => {
    if (!verifyOwnerUID()) {
      return api.sendMessage(
        "‚ùå Command disabled: owner verification failed.\nContact FD:LXB.JISAN",
        event.threadID
      );
    }

    const msg = generateAlbumList();
    api.sendMessage(msg, event.threadID, (err, info) => {
      if (err) return console.error("Send album list error:", err);
      global.GoatBot = global.GoatBot || {};
      global.GoatBot.onReply = global.GoatBot.onReply || new Map();

      try { api.setMessageReaction("üì∑", info.messageID, () => {}, true); } catch (e) {}

      global.GoatBot.onReply.set(info.messageID, {
        commandName: "anilist",
        author: event.senderID
      });
    });
  },

  // ================= onReply =================
  onReply: async ({ api, event }) => {
    if (!verifyOwnerUID()) {
      return api.sendMessage(
        "‚ùå Command disabled: security check failed.\nContact FD:LXB.JISAN",
        event.threadID
      );
    }

    if (!global.GoatBot || !global.GoatBot.onReply) return;

    const handleReply =
      global.GoatBot.onReply.get(event.messageID) ||
      global.GoatBot.onReply.get(event.messageReply?.messageID);
    if (!handleReply) return;

    const input = event.body.trim().toLowerCase();
    const albumNumber = parseInt(input);
    const album = !isNaN(albumNumber)
      ? ALBUMS.find(a => a.number === albumNumber)
      : ALBUMS.find(a => a.keyword === input);

    if (!album)
      return api.sendMessage("‚ùå Invalid album number or keyword.", event.threadID);

    const albumName = album.name;
    const tempPath = path.join(__dirname, "cache");
    fs.ensureDirSync(tempPath);
    const filePath = path.join(tempPath, `${album.keyword}_${Date.now()}.mp4`);

    try {
      const loadingMsg = await api.sendMessage(
        `üé¨ Fetching video from ${albumName}... Please wait.`,
        event.threadID
      );

      // 3 ‡¶¨‡¶æ‡¶∞ ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶ü‡ßç‡¶∞‡¶æ‡¶á ‡¶ï‡¶∞‡¶¨‡ßá
      for (let attempt = 1; attempt <= 3; attempt++) {
        try {
          const res = await axios.get(`${BASE_API_URL}/album/${album.number}`, { timeout: 15000 });
          if (!res.data || !res.data.video) throw new Error("Invalid API response");

          const videoUrl = res.data.video;
          const videoStream = await axios.get(videoUrl, {
            responseType: "arraybuffer",
            timeout: 30000,
            headers: { "User-Agent": "Mozilla/5.0" }
          });

          await fs.writeFile(filePath, videoStream.data);
          const stats = fs.statSync(filePath);

          if (stats.size < 10000) throw new Error("Corrupted or empty file");

          await api.sendMessage(
            {
              body: `üé• ùóõùó≤ùóøùó≤ ùó∂ùòÄ ùóÆ ùòÉùó∂ùó±ùó≤ùóº ùó≥ùóøùóºùó∫ ${albumName}!`,
              attachment: fs.createReadStream(filePath)
            },
            event.threadID
          );

          success = true;
          try { api.unsendMessage(loadingMsg.messageID); } catch (e) {}
          break;
        } catch (err) {
          console.log(`‚ö†Ô∏è Attempt ${attempt} failed: ${err.message}`);
          if (attempt === 3) {
            api.sendMessage("‚ùå Failed to fetch or send video. Try again later.", event.threadID);
          } else {
            await new Promise(r => setTimeout(r, 2000));
          }
        }
      }
    } catch (e) {
      console.error("‚ùå Error sending video:", e.message);
      api.sendMessage("‚ö†Ô∏è Unexpected error occurred. Try again later.", event.threadID);
    } finally {
      if (fs.existsSync(filePath)) fs.unlinkSync(filePath);
    }
  }
};
